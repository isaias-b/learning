Within this Play application i am trying to learn and demonstrate several things
================================================================================

- Using reader monads in combination with guice dependency injection container (this should be configured to use different implementations for production and test, later on)
- Provide a small set of reliable REST endpoints (only two GET requests ATM)
- Use centralized error and error recovery handling
- Fetch data from a very simple cassandra database (this should be combined with Anorm, later on)
- Use behaviour driven test specifications to test some parts of the application

To execute this, make sure to have a cassandra database installed
with a keyspace called "mykespace". Anything else is generated on first
execution by the given database migrations. The keyspace will contain
the following changes.

CREATE TABLE mykeyspace.users (
    user_id int PRIMARY KEY,
    fname text,
    lname text
);

INSERT INTO users(user_id, fname, lname) VALUES(123, 'Hans', 'Wurst');

With a database setup as described above it should be possible 
to execute the "test" command inside an "activator" instance. To verify
cd to your path of the project further referenced as "<PATH-TO-PROJECT>"
and run "activator". This should produce the following output. (sample from windows)

[play-example] $ test
[info] Compiling 1 Scala source to <PATH-TO-PROJECT>\target\scala-2.11\classes...
[info] ApplicationSpec:
[info] - application - Creating Pool for datasource 'default'
[info] Application
[info] - should send 404 on a bad request
[info] - should render the index page
[info] - application - Shutting down connection pool.
[info] UserSpec:
[info] - application - Creating Pool for datasource 'default'
[info] Calling GET on the /api/user resource
[info] - should send 400 BAD_REQUEST with an invalid id
[info] - should send 200 OK with a valid id
[info] - should send 200 OK with a valid but non existent id
[info] Calling GET on the /api/user/all resource
[info] - should send 200 OK
[info] - application - Shutting down connection pool.
[info] RecoverSpec:
[info] toSafeInt returns a parser from string to to int, which
[info] - should turn invalid integer strings into instances of Failure(ClientException)
[info] - should turn valid integer strings xx into instances of Success[Int](xx)
[info] toSafeResult
[info] - should return any given xx result when given a Success(xx)
[info] - should return a BadRequest(msg) result for any given ClientException(msg)
[info] - should return a NotImplemented result for org.apache.commons.lang3.NotImplementedException
[info] - should return a NotImplemented result for scala.NotImplementedError
[info] - should return an InternalServerError on anything else
[info] ConnectionUriSpec:
[info] A Cassandra connection URI object
[info] - should parse a URI with a single host
[info] - should parse a URI with additional hosts
[info] IntegrationSpec:
[info] - application - Creating Pool for datasource 'default'
[info] Application
[info] - should work from within a browser
[info] - application - Shutting down connection pool.
[info] UserSpec:
[info] - application - Creating Pool for datasource 'default'
[info] ANORM: on table users
[info] - should fetch all should retrieve List(User(123,Hans,Wurst))
[info] - should fetch with valid id should retrieve User(123,Hans,Wurst)
[info] - application - Shutting down connection pool.
[info] ScalaTest
[info] Run completed in 4 seconds, 167 milliseconds.
[info] Total number of tests run: 18
[info] Suites: completed 6, aborted 0
[info] Tests: succeeded 18, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[info] Passed: Total 18, Failed 0, Errors 0, Passed 18
[success] Total time: 5 s, completed 03.01.2016 22:48:49


When the tests ran successfully, you can start the application by executing
the command "activator run". This should instantiate the application to listen
on "localhost:9000". In case this produces any conflicts on your machine you can
easily override this parameter using the command "activator \"run 9999\"" to
spawn a new instance listening on port 9999.
